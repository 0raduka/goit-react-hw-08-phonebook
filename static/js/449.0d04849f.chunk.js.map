{"version":3,"file":"static/js/449.0d04849f.chunk.js","mappings":"+QASe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,cACxBC,GAAaF,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,eACzBE,GAAaH,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,eAEzBG,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOV,EAASW,GAClB,IAAK,WACH,OAAOT,EAAYS,GACrB,QACE,SAcN,OACE,iBAAKC,UAAU,WAAf,WACE,UAAC,IAAD,CAAMA,UAAU,cAAhB,WACE,SAAC,QAAD,CACEC,QAAQ,MACRC,IAAI,iEAGN,UAAC,SAAD,YACE,SAAC,UAAD,6DACA,SAAC,SAAD,0OAIJ,UAAC,IAAD,CAAMC,SAxBW,SAAAC,GACnBA,EAAEC,iBACFrB,EAASsB,EAAAA,GAAAA,MAAqB,CAAEnB,MAAAA,EAAOE,SAAAA,KACnCM,IACFY,QAAQC,IAAI,gEACZpB,EAAS,IACTE,EAAY,MAkBkBU,UAAU,MAAxC,WACE,UAAC,UAAD,CAAYA,UAAU,MAAMS,UAAU,iBAAtC,WACE,SAAC,UAAD,uJACA,SAAC,YAAD,CACEC,KAAK,QACLZ,KAAK,QACLC,MAAOZ,EACPwB,YAAY,yDACZC,SAAUhB,QAId,UAAC,UAAD,CAAYI,UAAU,OAAOS,UAAU,oBAAvC,WACE,SAAC,UAAD,6KACA,SAAC,YAAD,CACEC,KAAK,WACLZ,KAAK,WACLC,MAAOV,EACPsB,YAAY,yDACZC,SAAUhB,QAId,SAAC,IAAD,CAAQK,QAAQ,UAAUS,KAAK,SAA/B,kEAIDnB,IAAa,SAAC,MAAD,CAAaS,WAAYN,GAAc,WACpDH,GAAaG,IAAc","sources":["views/logInView.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport { authSelectors } from 'redux/auth';\nimport React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { BiLoaderAlt } from 'react-icons/bi';\n\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const isLogging = useSelector(authSelectors.getIsLogging);\n  const loginError = useSelector(authSelectors.getLoginError);\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.logIn({ email, password }));\n    if (isLoggedIn) {\n      console.log('ПОЛУЧИЛОСЬ');\n      setEmail('');\n      setPassword('');\n    }\n  };\n\n  return (\n    <div className=\"centered\">\n      <Card className=\"text-center\">\n        <Card.Img\n          variant=\"top\"\n          src=\"https://c.tenor.com/OZPoWWCdJ8oAAAAC/michael-scott-wink.gif\"\n        />\n\n        <Card.Body>\n          <Card.Title>Опять ты !</Card.Title>\n          <Card.Text>Коли бывалый, знаешь как тут все устроено.</Card.Text>\n        </Card.Body>\n      </Card>\n\n      <Form onSubmit={handleSubmit} className=\"m-3\">\n        <Form.Group className=\"m-2\" controlId=\"formBasicEmail\">\n          <Form.Label>Извольте ваш онлайн адрес</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            placeholder=\"Адресочек\"\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Ну и так что б приватно все было</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            placeholder=\"Парольчик\"\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Button variant=\"success\" type=\"submit\">\n          Впустите!\n        </Button>\n      </Form>\n      {isLogging && <BiLoaderAlt className={!loginError && 'rotate'} />}\n      {isLogging && loginError && <p> хм. где то ошибка</p>}\n    </div>\n  );\n}\n"],"names":["LoginView","dispatch","useDispatch","useState","email","setEmail","password","setPassword","isLogging","useSelector","authSelectors","loginError","isLoggedIn","handleChange","target","name","value","className","variant","src","onSubmit","e","preventDefault","authOperations","console","log","controlId","type","placeholder","onChange"],"sourceRoot":""}